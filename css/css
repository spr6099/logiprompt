 (*) padding
      Padding is used to create space around an element's content, inside of any defined borders.
 (*) margin
      Margins are used to create space around elements, outside of any defined borders.
      
          border: 1px solid black;
          margin: 200px 200px;
              ( padding-left: 30px;
                padding-top: 30px;)
          padding: 40px 40px 30px 50px; 
          
 (*)   css 3 type = inline,external,internal
 (*)   (selector,property,propert value) 
        .h1 {
        color: rgb(105, 24, 24) }
 (*)   Text Format propertys
      -------------------
      .text { 
        color
        text-align(left,right,center,justify)
        text-decoration(underline,overline,line-through)

        text-decoration: underline wavy red 2px;
                   or      
        text-decoration-line: underline;
        text-decoration-style: wavy;
        text-decoration-color: red;
        text-decoration-thickness: 2px;

        text-transform:(uppercase,lowercase,capitalize)
        text-shadow: 2px 2px 6px red
     }

 (*) Font format propertys
     ---------------------
     #h2 {
        font-family: cursive;
        font-size: small;
        font-weight: bolder;
        font-variant:small-caps; (normal) 
        font-style:oblique;
        }
 (*) Object Fit
     ----------
        <img src="car.jpg" alt="" class="objClass">
 
      img{
            width: 200px;
            height: 300px;
            border: 1px solid black;
        }
        .objClass{
            object-fit: fill;
            object-fit: contain;
            object-fit: cover;
            object-fit: none;
            object-fit: scale-down;
        }
 (*) pseudo classes
   --------
   A pseudo-class is used to define a special state of an element.
   <a href="objectfit.html">click</a>

      a:hover{
        color: rgb(30, 123, 160)        ;
      }
      a:active{
        color: aqua;
      }
      a:visited{
        color:rgb(0, 255, 149)
      }
    
 

 (*) background of img & text
     -----------
     para1{
        background-image: url("/car.jpg");
        background-size: contain;   (300px 500px),(cover),(%)
        background-repeat: no-repeat;  (no-repeat),(repeat-y),(repeat); 
        background-attachment: scroll;  (scroll,fixed,local); 
        }
    para2{
         background-image: linear-gradient(red, blue, yellow);
        ( background-image: linear-gradient(to top right,red,green,yellow);)

                        or
        background-image: radial-gradient(yellow, green, blue); }
    
    img {
        border: 5px solid black;
        border-radius: 60px;
          (border-radius: 70%;)
          (border-top-left-radius: 30px; )
        opacity: 0.7;
      }
     
      day2
      -----
(*)Table format
    border: 2px solid black;
    border-collapse: collapse;
     th{
            vertical-align: middle;
        }
     td{
            text-align: center;
        }
      td:hover{
            color:indianred;
            background-color: bisque;
        }
 
(*) Position property 
  The position CSS property sets how an element is positioned in a document. 
  The top, right, bottom, and left properties determine the final location of positioned elements.
  (1)position: static;      --> Normal Flow of the document. 
  (2)position: relative;
      top: 40px; left: 40px; --> 
  (3)position: absolute;
      top: 40px; left: 40px;
  (4)position: sticky;
      top: 20px;

(*) Flex
  display: flex;
  justify-content: space-evenly;(start,center,space-around,space-between)
  flex-direction: column-reverse;(row,column,column-reverse)
  flex-wrap: wrap; (no-wrap,wrap-reverse)

    (*) flex:1(2,1 30px,1 1 100px) The flex CSS shorthand property sets how a flex item will grow 
                          or shrink to fit the space available in its flex container.
    
(*) Visiblity & display
         -----
         .one{
          /* visibility:hidden; */  The visibility CSS property shows or hides an element without changing the layout of a document. 
          display: none; 
        }
    contents
    ---------
    (*) Text Format propertys
    (*) Font format propertys
    (*) Object Fit
    (*) pseudo classes
    (*) background of img & text
    (*) Table format
    (*) Position property 
    (*) Flex
    (*) visiblity & display







